version: '3.8'

services:
  bdc-competitive:
    build:
      context: ./bdc-competitive
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: unless-stopped
    volumes:
      - ./bdc-competitive:/app
      - /app/node_modules
      - /app/.next
    networks:
      - bdc-network

  bdc-assessment:
    build:
      context: ./bdc-assessment
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    restart: unless-stopped
    volumes:
      - ./bdc-assessment:/app
      - /app/node_modules
      - /app/.next
    networks:
      - bdc-network

  bdc-dashboard:
    build:
      context: ./bdc-dashboard
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - NEXTAUTH_URL=https://bdcapp.vandoko.com
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
    restart: unless-stopped
    volumes:
      - ./bdc-dashboard:/app
      - /app/node_modules
      - /app/.next
    networks:
      - bdc-network
    depends_on:
      - postgres

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=bdc_dashboard
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bdc-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - bdc-competitive
      - bdc-assessment
      - bdc-dashboard
    restart: unless-stopped
    networks:
      - bdc-network

networks:
  bdc-network:
    driver: bridge

volumes:
  postgres_data: